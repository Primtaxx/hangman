{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = [\"src\", \"alt\"];\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"img\", {\n    src: require('./img/' + (10 - $data.guessesLeft) + '.jpg'),\n    alt: _ctx.guessfehler\n  }, null, 8 /* PROPS */, _hoisted_1), _createElementVNode(\"p\", null, \"Word: \" + _toDisplayString($options.maskedWord), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Guesses left: \" + _toDisplayString($data.guessesLeft), 1 /* TEXT */), $data.won ? (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \"You won!\")) : _createCommentVNode(\"v-if\", true), $data.lost ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \"You lost! The word was: \" + _toDisplayString($data.word), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.letter = $event),\n    type: \"text\",\n    maxlength: \"1\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.letter]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.guessLetter && $options.guessLetter(...args))\n  }, \"Guess\"), _hoisted_4, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.displayLetters, l => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: l,\n      onClick: $event => $options.guessLetter(l)\n    }, _toDisplayString(l), 9 /* TEXT, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */)), _hoisted_6, !$data.won && !$data.lost ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 2,\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.cheat && $options.cheat(...args))\n  }, \"Cheat\")) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;;;;;;;gCASIA,oBAAM;;gCAENA,oBAAM;;;uBAVRC,oBAYM,cAXJD,oBAA4E;IAAtEE,GAAG,EAAEC,OAAO,kBAAiBC,iBAAW;IAAYC,GAAG,EAAEC;uCAC/DN,oBAA2B,WAAxB,QAAM,oBAAEO,mBAAU,kBACrBP,oBAAoC,WAAjC,gBAAc,oBAAEI,iBAAW,kBACrBA,SAAG,kBAAZH,oBAA0B,iBAAZ,UAAQ,wCACbG,UAAI,kBAAbH,oBAAmD,iBAApC,0BAAwB,oBAAEG,UAAI,uEAC7CJ,oBAAoD;+DAApCI,YAAM;IAAEI,IAAI,EAAC,MAAM;IAACC,SAAS,EAAC;iDAA9BL,YAAM,KACtBJ,oBAA2C;IAAlCU,OAAK,yCAAEH,qDAAW;KAAE,OAAK,GAClCI,UAAM,qBACNV,oBAAmFW,6BAA/DL,uBAAc,EAAnBM,CAAC;yBAAhBZ,oBAAmF;MAA9Ca,GAAG,EAAED,CAAC;MAAGH,OAAK,YAAEH,oBAAW,CAACM,CAAC;wBAAKA,CAAC;kCACxEE,UAAM,GACSX,SAAG,KAAKA,UAAI,kBAA3BH,oBAA0D;;IAA5BS,OAAK,yCAAEH,yCAAK;KAAE,OAAK","names":["_createElementVNode","_createElementBlock","src","require","$data","alt","_ctx","$options","type","maxlength","onClick","_hoisted_4","_Fragment","l","key","_hoisted_6"],"sourceRoot":"","sources":["/Users/miguel/hangman/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <img :src=\"require('./img/' +(10 - guessesLeft)+'.jpg')\" :alt=\"guessfehler\">\n    <p>Word: {{maskedWord}}</p>\n    <p>Guesses left: {{guessesLeft}}</p>\n    <p v-if=\"won\">You won!</p>\n    <p v-if=\"lost\">You lost! The word was: {{word}}</p>\n    <input v-model=\"letter\" type=\"text\" maxlength=\"1\" />\n    <button @click=\"guessLetter\">Guess</button>\n    <br />\n    <button v-for=\"l in displayLetters\" :key=\"l\" @click=\"guessLetter(l)\">{{l}}</button>\n    <br />\n    <button v-if=\"!won && !lost\" @click=\"cheat\">Cheat</button>\n  </div>\n</template>\n\n<script>\nimport WordData from \"../Aufgabe/wordlist.json\";\n\n\nexport default {\n  data() {\n    return {\n      word: WordData[Math.floor(Math.random() * WordData.length)],\n      letter: \"\",\n      letters: Array.from(Array(26)).map((e, i) => String.fromCharCode(i + 65)),\n      usedLetters: [],\n      guessesLeft: 10,\n      timer: null,\n      startTime: null,\n      endTime: null,\n      show: false,\n      won: false,\n      lost: false,\n    };\n  },\n\n  computed: {\n    maskedWord() {\n      let masked = \"\";\n      for (let i = 0; i < this.word.length; i++) {\n        if (this.usedLetters.includes(this.word[i])) {\n          masked += this.word[i];\n        } else {\n          masked += \"_\";\n        }\n      }\n      console.log(masked);\n      return masked;\n    },\n    displayLetters() {\n      return this.letters;\n    },\n  },\n  watch: {\n    usedLetters() {\n    },\n  },\n\n\n  methods: {\n    guessLetter(l) {\n    if (this.letter) {\n      l = this.letter;\n      this.letter = \"\";\n    }\n\n    if (this.usedLetters.includes(l) || this.won || this.lost) return;\n    this.usedLetters.push(l);\n\n    if (!this.word.includes(l)) {\n      this.guessesLeft--;\n      this.fehler--;\n    } else {\n      let newMaskedWord = \"\";\n      for (let i = 0; i < this.word.length; i++) {\n        if (this.word[i] === l) {\n          newMaskedWord += l;\n        } else {\n          newMaskedWord += this.maskedWord[i];\n        }\n      }\n      this.maskedWord = newMaskedWord;\n      this.scoreManager(10);\n      this.gefunden += l.toLowerCase();\n    }\n\n    this.letters = this.letters.filter((letter) => letter !== l);\n    this.$forceUpdate();\n    this.checkGameOver();\n  },\n\n\n\n\n\ncheckGameOver() {\n  if (!this.maskedWord.includes(\"_\")) {\n    this.won = true;\n    clearInterval(this.timer);\n    this.endTime = Date.now();\n    this.saveScore();\n  }\n  if (this.guessesLeft === 0) {\n    this.lost = true;\n    clearInterval(this.timer);\n  }\n},\n    saveScore() {\n      let scores = JSON.parse(localStorage.getItem(\"scores\")) || [];\n      let time = this.endTime - this.startTime;\n      scores.push({ time, word: this.word });\n      localStorage.setItem(\"scores\", JSON.stringify(scores));\n    },\n    cheat() {\n      this.show = true;\n    },\n    startTimer() {\n      this.startTime = Date.now();\n      this.timer = setInterval(() => {}, 1000);\n    },\n  },\n  mounted() {\n    window.addEventListener(\"keydown\", (e) => {\n      if (e.key.length === 1) {\n        this.guessLetter(e.key.toUpperCase());\n      }\n    });\n    this.startTimer();\n  },\n};\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}