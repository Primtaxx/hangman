{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport WordData from \"../Aufgabe/wordlist.json\";\nexport default {\n  data() {\n    return {\n      word: WordData[Math.floor(Math.random() * WordData.length)],\n      letter: \"\",\n      letters: Array.from(Array(26)).map((e, i) => String.fromCharCode(i + 65)),\n      usedLetters: [],\n      guessesLeft: 11,\n      timer: null,\n      startTime: null,\n      endTime: null,\n      show: false,\n      won: false,\n      lost: false,\n      fehler: 0,\n      hangmanImages: [\"/img/0.jpg\", \"/img/1.jpg\", \"/img/2.jpg\", \"/img/3.jpg\", \"/img/4.jpg\", \"/img/5.jpg\", \"/img/6.jpg\", \"/img/7.jpg\", \"/img/8.jpg\", \"/img/9.jpg\", \"/img/10.jpg\"]\n    };\n  },\n  computed: {\n    maskedWord() {\n      let masked = \"\";\n      for (let i = 0; i < this.word.length; i++) {\n        if (this.usedLetters.includes(this.word[i])) {\n          masked += this.word[i];\n        } else {\n          masked += \"_\";\n        }\n      }\n      return masked;\n    }\n  },\n  methods: {\n    guessLetter(l) {\n      if (!l) l = this.letter;\n      if (this.usedLetters.includes(l)) return;\n      this.usedLetters.push(l);\n      if (!this.word.includes(l)) {\n        this.guessesLeft--;\n      }\n      this.checkGameOver();\n    },\n    checkGameOver() {\n      if (!this.maskedWord.includes(\"_\")) {\n        this.won = true;\n        clearInterval(this.timer);\n        this.endTime = Date.now();\n        this.saveScore();\n      }\n      if (this.guessesLeft === 0) {\n        this.lost = true;\n        clearInterval(this.timer);\n      }\n    },\n    saveScore() {\n      let scores = JSON.parse(localStorage.getItem(\"scores\")) || [];\n      let time = this.endTime - this.startTime;\n      scores.push({\n        time,\n        word: this.word\n      });\n      localStorage.setItem(\"scores\", JSON.stringify(scores));\n    },\n    cheat() {\n      this.show = true;\n    },\n    startTimer() {\n      this.startTime = Date.now();\n      this.timer = setInterval(() => {}, 1000);\n    }\n  },\n  mounted() {\n    window.addEventListener(\"keydown\", e => {\n      if (e.key.length === 1) {\n        this.guessLetter(e.key.toUpperCase());\n      }\n    });\n    this.startTimer();\n  }\n};","map":{"version":3,"mappings":"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","names":["WordData","data","word","Math","floor","random","length","letter","letters","Array","from","map","e","i","String","fromCharCode","usedLetters","guessesLeft","timer","startTime","endTime","show","won","lost","fehler","hangmanImages","computed","maskedWord","masked","includes","methods","guessLetter","l","push","checkGameOver","clearInterval","Date","now","saveScore","scores","JSON","parse","localStorage","getItem","time","setItem","stringify","cheat","startTimer","setInterval","mounted","window","addEventListener","key","toUpperCase"],"sourceRoot":"","sources":["/Users/miguel/hangman/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <img :src=\"require('./img/' +fehler+'.jpg')\" :alt=\"fehler\">\n    <img :src=\"hangmanImages[11 - guessesLeft]\" />\n    <p>Word: {{maskedWord}}</p>\n    <p>Guesses left: {{guessesLeft}}</p>\n    <p v-if=\"won\">You won!</p>\n    <p v-if=\"lost\">You lost! The word was: {{word}}</p>\n    <input v-model=\"letter\" type=\"text\" maxlength=\"1\" />\n    <button @click=\"guessLetter\">Guess</button>\n    <br />\n    <button v-for=\"l in letters\" :key=\"l\" @click=\"guessLetter(l)\">{{l}}</button>\n    <br />\n    <button v-if=\"!won && !lost\" @click=\"cheat\">Cheat</button>\n  </div>\n</template>\n\n<script>\nimport WordData from \"../Aufgabe/wordlist.json\";\n\nexport default {\n  data() {\n    return {\n      word: WordData[Math.floor(Math.random() * WordData.length)],\n      letter: \"\",\n      letters: Array.from(Array(26)).map((e, i) => String.fromCharCode(i + 65)),\n      usedLetters: [],\n      guessesLeft: 11,\n      timer: null,\n      startTime: null,\n      endTime: null,\n      show: false,\n      won: false,\n      lost: false,\n      fehler: 0, \n      hangmanImages: [\n        \"/img/0.jpg\",\n        \"/img/1.jpg\",\n        \"/img/2.jpg\",\n        \"/img/3.jpg\",\n        \"/img/4.jpg\",\n        \"/img/5.jpg\",\n        \"/img/6.jpg\",\n        \"/img/7.jpg\",\n        \"/img/8.jpg\",\n        \"/img/9.jpg\",\n        \"/img/10.jpg\",\n      ],\n    };\n  },\n  computed: {\n    maskedWord() {\n      let masked = \"\";\n      for (let i = 0; i < this.word.length; i++) {\n        if (this.usedLetters.includes(this.word[i])) {\n          masked += this.word[i];\n        } else {\n          masked += \"_\";\n        }\n      }\n      return masked;\n    },\n  },\n  methods: {\n    guessLetter(l) {\n      if (!l) l = this.letter;\n      if (this.usedLetters.includes(l)) return;\n      this.usedLetters.push(l);\n      if (!this.word.includes(l)) {\n        this.guessesLeft--;\n      }\n      this.checkGameOver();\n    },\n    checkGameOver() {\n      if (!this.maskedWord.includes(\"_\")) {\n        this.won = true;\n        clearInterval(this.timer);\n        this.endTime = Date.now();\n        this.saveScore();\n      }\n      if (this.guessesLeft === 0) {\n        this.lost = true;\n        clearInterval(this.timer);\n      }\n    },\n    saveScore() {\n      let scores = JSON.parse(localStorage.getItem(\"scores\")) || [];\n      let time = this.endTime - this.startTime;\n      scores.push({ time, word: this.word });\n      localStorage.setItem(\"scores\", JSON.stringify(scores));\n    },\n    cheat() {\n      this.show = true;\n    },\n    startTimer() {\n      this.startTime = Date.now();\n      this.timer = setInterval(() => {}, 1000);\n    },\n  },\n  mounted() {\n    window.addEventListener(\"keydown\", (e) => {\n      if (e.key.length === 1) {\n        this.guessLetter(e.key.toUpperCase());\n      }\n    });\n    this.startTimer();\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}