{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"src\"];\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = {\n  key: 1\n};\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Time\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Level\")], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" display the word to be guessed (cheat mode) \"), _ctx.show ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2, _toDisplayString(_ctx.word), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" display the hangman image based on the number of incorrect guesses \"), _createElementVNode(\"img\", {\n    src: 'hangman-' + _ctx.numWrong + '.jpg'\n  }, null, 8 /* PROPS */, _hoisted_3), _createCommentVNode(\" display the correctly guessed letters \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.wordLetters, letter => {\n    return _openBlock(), _createElementBlock(\"span\", null, [_ctx.correctLetters.includes(letter) ? (_openBlock(), _createElementBlock(\"span\", _hoisted_4, _toDisplayString(letter), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_5, \"_\"))]);\n  }), 256 /* UNKEYED_FRAGMENT */)), _createCommentVNode(\" display the buttons for the letters A-Z \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.letters, letter => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      onClick: $event => _ctx.chooseLetter(letter)\n    }, _toDisplayString(letter), 9 /* TEXT, PROPS */, _hoisted_6);\n  }), 256 /* UNKEYED_FRAGMENT */)), _createCommentVNode(\" display the high scores \"), _createElementVNode(\"table\", null, [_hoisted_7, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.highScores, score => {\n    return _openBlock(), _createElementBlock(\"tr\", null, [_createElementVNode(\"td\", null, _toDisplayString(score.time), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(score.level), 1 /* TEXT */)]);\n  }), 256 /* UNKEYED_FRAGMENT */))]), _createCommentVNode(\" button to save the high scores \"), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.saveHighScores && _ctx.saveHighScores(...args))\n  }, \"Save High Scores\")]);\n}","map":{"version":3,"mappings":";;EACOA,EAAE,EAAC;AAAK;;;;;;;;;;;;gCAkBTC,oBAGK,0BAFHA,oBAAa,YAAT,MAAI,gBACRA,oBAAc,YAAV,OAAK;;;uBApBfC,oBA8BM,OA9BNC,UA8BM,GA7BJC,oEAAoD,EACxCC,SAAI,kBAAhBH,oBAAiC,qCAAbG,SAAI,uDAExBD,2FAA2E,EAC3EH,oBAA6C;IAAvCK,GAAG,eAAeD,aAAQ;uCAEhCD,8DAA8C,qBAC9CF,oBAGOK,6BAHgBF,gBAAW,EAArBG,MAAM;yBAAnBN,oBAGO,eAFOG,mBAAc,CAACI,QAAQ,CAACD,MAAM,mBAA1CN,oBAA8D,qCAAfM,MAAM,mCACrDN,oBAAqB,oBAAR,GAAC;oCAGhBE,gEAAgD,qBAChDF,oBAAmFK,6BAA1DF,YAAO,EAAjBG,MAAM;yBAArBN,oBAAmF;MAAhDQ,OAAK,YAAEL,iBAAY,CAACG,MAAM;wBAAKA,MAAM;oCAExEJ,gDAAgC,EAChCH,oBASQ,gBARNU,UAGK,qBACLT,oBAGKK,6BAHeF,eAAU,EAAnBO,KAAK;yBAAhBV,oBAGK,aAFHD,oBAAuB,6BAAjBW,KAAK,CAACC,IAAI,kBAChBZ,oBAAwB,6BAAlBW,KAAK,CAACE,KAAK;sCAIrBV,uDAAuC,EACvCH,oBAAyD;IAAhDS,OAAK,yCAAEL,mDAAc;KAAE,kBAAgB","names":["id","_createElementVNode","_createElementBlock","_hoisted_1","_createCommentVNode","_ctx","src","_Fragment","letter","includes","onClick","_hoisted_7","score","time","level"],"sourceRoot":"","sources":["/Users/miguel/hangman/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <!-- display the word to be guessed (cheat mode) -->\n    <span v-if=\"show\">{{word}}</span>\n\n    <!-- display the hangman image based on the number of incorrect guesses -->\n    <img :src=\"'hangman-' + numWrong + '.jpg'\" />\n\n    <!-- display the correctly guessed letters -->\n    <span v-for=\"letter in wordLetters\">\n      <span v-if=\"correctLetters.includes(letter)\">{{letter}}</span>\n      <span v-else>_</span>\n    </span>\n\n    <!-- display the buttons for the letters A-Z -->\n    <button v-for=\"letter in letters\" @click=\"chooseLetter(letter)\">{{letter}}</button>\n\n    <!-- display the high scores -->\n    <table>\n      <tr>\n        <th>Time</th>\n        <th>Level</th>\n      </tr>\n      <tr v-for=\"score in highScores\">\n        <td>{{score.time}}</td>\n        <td>{{score.level}}</td>\n      </tr>\n    </table>\n\n    <!-- button to save the high scores -->\n    <button @click=\"saveHighScores\">Save High Scores</button>\n  </div>\n</template>\n<script>\n\nimport WordData from \"../Aufgabe/wordlist.json\";\nimport Vue from \"vue\";\nconst app = new Vue({\n  el: \"#app\",\n  data: {\n    // array of words to choose from\n    words: WordData,\n    // current word being guessed\n    word: \"\",\n    // array of letters in the current word\n    wordLetters: [],\n    // array of correctly guessed letters\n    correctLetters: [],\n    // array of letters that have been chosen\n    chosenLetters: [],\n    // number of incorrect guesses\n    numWrong: 0,\n    // array of letters A-Z\n    letters: Array.from(Array(26)).map((e, i) => String.fromCharCode(i + 65)),\n    // flag for showing the word (cheat mode)\n    show: false,\n    // high scores\n    highScores: []\n  },\n  methods: {\n    // choose a letter and process it in the game logic\n    chooseLetter(letter) {\n      // process the letter in the game logic\n      // update chosenLetters and correctLetters arrays\n      // update numWrong if necessary\n      // remove the letter from the letters array\n      this.letters = this.letters.filter(l => l !== letter);\n    },\n    // save the high scores to the browser's local store\n    saveHighScores() {\n      localStorage.setItem(\"highScores\", JSON.stringify(this.highScores));\n    }\n  },\n  mounted() {\n    // set up key listener for cheat key\n    window.addEventListener(\"keydown\", e => {\n      if (e.key === \"c\") {\n        this.show = true;\n      }\n    });\n\n    // set up the timer\n    let startTime = Date.now();\n    setInterval(() => {\n      // calculate elapsed time\n      let elapsedTime = Date.now() - startTime;\n      // calculate level based on elapsed time\n      let level = Math.floor(elapsedTime / 1000);\n      // update the high score\n      this.highScores.push({time: elapsedTime, level: level});\n    }, 1000);\n  }\n});\n\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}