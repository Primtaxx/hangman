{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport WordData from \"../Aufgabe/wordlist.json\";\nimport Vue from \"vue\";\nconst app = new Vue({\n  el: \"#app\",\n  data: {\n    // array of words to choose from\n    words: WordData,\n    // current word being guessed\n    word: \"\",\n    // array of letters in the current word\n    wordLetters: [],\n    // array of correctly guessed letters\n    correctLetters: [],\n    // array of letters that have been chosen\n    chosenLetters: [],\n    // number of incorrect guesses\n    numWrong: 0,\n    // array of letters A-Z\n    letters: Array.from(Array(26)).map((e, i) => String.fromCharCode(i + 65)),\n    // flag for showing the word (cheat mode)\n    show: false,\n    // high scores\n    highScores: []\n  },\n  methods: {\n    // choose a letter and process it in the game logic\n    chooseLetter(letter) {\n      // process the letter in the game logic\n      // update chosenLetters and correctLetters arrays\n      // update numWrong if necessary\n      // remove the letter from the letters array\n      this.letters = this.letters.filter(l => l !== letter);\n    },\n    // save the high scores to the browser's local store\n    saveHighScores() {\n      localStorage.setItem(\"highScores\", JSON.stringify(this.highScores));\n    }\n  },\n  mounted() {\n    // set up key listener for cheat key\n    window.addEventListener(\"keydown\", e => {\n      if (e.key === \"c\") {\n        this.show = true;\n      }\n    });\n\n    // set up the timer\n    let startTime = Date.now();\n    setInterval(() => {\n      // calculate elapsed time\n      let elapsedTime = Date.now() - startTime;\n      // calculate level based on elapsed time\n      let level = Math.floor(elapsedTime / 1000);\n      // update the high score\n      this.highScores.push({\n        time: elapsedTime,\n        level: level\n      });\n    }, 1000);\n  }\n});","map":{"version":3,"mappings":";AAmCA,OAAOA,QAAO,MAAO,0BAA0B;AAC/C,OAAOC,GAAE,MAAO,KAAK;AACrB,MAAMC,GAAE,GAAI,IAAID,GAAG,CAAC;EAClBE,EAAE,EAAE,MAAM;EACVC,IAAI,EAAE;IACJ;IACAC,KAAK,EAAEL,QAAQ;IACf;IACAM,IAAI,EAAE,EAAE;IACR;IACAC,WAAW,EAAE,EAAE;IACf;IACAC,cAAc,EAAE,EAAE;IAClB;IACAC,aAAa,EAAE,EAAE;IACjB;IACAC,QAAQ,EAAE,CAAC;IACX;IACAC,OAAO,EAAEC,KAAK,CAACC,IAAI,CAACD,KAAK,CAAC,EAAE,CAAC,CAAC,CAACE,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKC,MAAM,CAACC,YAAY,CAACF,IAAI,EAAE,CAAC,CAAC;IACzE;IACAG,IAAI,EAAE,KAAK;IACX;IACAC,UAAU,EAAE;EACd,CAAC;EACDC,OAAO,EAAE;IACP;IACAC,YAAY,CAACC,MAAM,EAAE;MACnB;MACA;MACA;MACA;MACA,IAAI,CAACZ,OAAM,GAAI,IAAI,CAACA,OAAO,CAACa,MAAM,CAACC,KAAKA,MAAMF,MAAM,CAAC;IACvD,CAAC;IACD;IACAG,cAAc,GAAG;MACfC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAACV,UAAU,CAAC,CAAC;IACrE;EACF,CAAC;EACDW,OAAO,GAAG;IACR;IACAC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAElB,KAAK;MACtC,IAAIA,CAAC,CAACmB,GAAE,KAAM,GAAG,EAAE;QACjB,IAAI,CAACf,IAAG,GAAI,IAAI;MAClB;IACF,CAAC,CAAC;;IAEF;IACA,IAAIgB,SAAQ,GAAIC,IAAI,CAACC,GAAG,EAAE;IAC1BC,WAAW,CAAC,MAAM;MAChB;MACA,IAAIC,WAAU,GAAIH,IAAI,CAACC,GAAG,EAAC,GAAIF,SAAS;MACxC;MACA,IAAIK,KAAI,GAAIC,IAAI,CAACC,KAAK,CAACH,WAAU,GAAI,IAAI,CAAC;MAC1C;MACA,IAAI,CAACnB,UAAU,CAACuB,IAAI,CAAC;QAACC,IAAI,EAAEL,WAAW;QAAEC,KAAK,EAAEA;MAAK,CAAC,CAAC;IACzD,CAAC,EAAE,IAAI,CAAC;EACV;AACF,CAAC,CAAC","names":["WordData","Vue","app","el","data","words","word","wordLetters","correctLetters","chosenLetters","numWrong","letters","Array","from","map","e","i","String","fromCharCode","show","highScores","methods","chooseLetter","letter","filter","l","saveHighScores","localStorage","setItem","JSON","stringify","mounted","window","addEventListener","key","startTime","Date","now","setInterval","elapsedTime","level","Math","floor","push","time"],"sourceRoot":"","sources":["/Users/miguel/hangman/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <!-- display the word to be guessed (cheat mode) -->\n    <span v-if=\"show\">{{word}}</span>\n\n    <!-- display the hangman image based on the number of incorrect guesses -->\n    <img :src=\"'hangman-' + numWrong + '.jpg'\" />\n\n    <!-- display the correctly guessed letters -->\n    <span v-for=\"letter in wordLetters\">\n      <span v-if=\"correctLetters.includes(letter)\">{{letter}}</span>\n      <span v-else>_</span>\n    </span>\n\n    <!-- display the buttons for the letters A-Z -->\n    <button v-for=\"letter in letters\" @click=\"chooseLetter(letter)\">{{letter}}</button>\n\n    <!-- display the high scores -->\n    <table>\n      <tr>\n        <th>Time</th>\n        <th>Level</th>\n      </tr>\n      <tr v-for=\"score in highScores\">\n        <td>{{score.time}}</td>\n        <td>{{score.level}}</td>\n      </tr>\n    </table>\n\n    <!-- button to save the high scores -->\n    <button @click=\"saveHighScores\">Save High Scores</button>\n  </div>\n</template>\n<script>\n\nimport WordData from \"../Aufgabe/wordlist.json\";\nimport Vue from \"vue\";\nconst app = new Vue({\n  el: \"#app\",\n  data: {\n    // array of words to choose from\n    words: WordData,\n    // current word being guessed\n    word: \"\",\n    // array of letters in the current word\n    wordLetters: [],\n    // array of correctly guessed letters\n    correctLetters: [],\n    // array of letters that have been chosen\n    chosenLetters: [],\n    // number of incorrect guesses\n    numWrong: 0,\n    // array of letters A-Z\n    letters: Array.from(Array(26)).map((e, i) => String.fromCharCode(i + 65)),\n    // flag for showing the word (cheat mode)\n    show: false,\n    // high scores\n    highScores: []\n  },\n  methods: {\n    // choose a letter and process it in the game logic\n    chooseLetter(letter) {\n      // process the letter in the game logic\n      // update chosenLetters and correctLetters arrays\n      // update numWrong if necessary\n      // remove the letter from the letters array\n      this.letters = this.letters.filter(l => l !== letter);\n    },\n    // save the high scores to the browser's local store\n    saveHighScores() {\n      localStorage.setItem(\"highScores\", JSON.stringify(this.highScores));\n    }\n  },\n  mounted() {\n    // set up key listener for cheat key\n    window.addEventListener(\"keydown\", e => {\n      if (e.key === \"c\") {\n        this.show = true;\n      }\n    });\n\n    // set up the timer\n    let startTime = Date.now();\n    setInterval(() => {\n      // calculate elapsed time\n      let elapsedTime = Date.now() - startTime;\n      // calculate level based on elapsed time\n      let level = Math.floor(elapsedTime / 1000);\n      // update the high score\n      this.highScores.push({time: elapsedTime, level: level});\n    }, 1000);\n  }\n});\n\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}