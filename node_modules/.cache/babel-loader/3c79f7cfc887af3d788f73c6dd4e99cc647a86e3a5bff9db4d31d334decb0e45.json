{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, vModelText as _vModelText, withDirectives as _withDirectives, createTextVNode as _createTextVNode, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"hangman\"\n};\nconst _hoisted_2 = [\"src\"];\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = {\n  key: 1\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Guess\", -1 /* HOISTED */);\nconst _hoisted_7 = {\n  key: 2\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"img\", {\n    src: 'hangman' + $data.steps + '.png'\n  }, null, 8 /* PROPS */, _hoisted_2), $data.word ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, _toDisplayString($data.word), 1 /* TEXT */)) : (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 1\n  }, _renderList($data.wordLetters, letter => {\n    return _openBlock(), _createElementBlock(\"p\", null, [$data.guessedLetters.includes(letter) ? (_openBlock(), _createElementBlock(\"span\", _hoisted_4, _toDisplayString(letter), 1 /* TEXT */)) : (_openBlock(), _createElementBlock(\"span\", _hoisted_5, \"_\"))]);\n  }), 256 /* UNKEYED_FRAGMENT */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[1] || (_cache[1] = _withModifiers((...args) => $options.guessLetter && $options.guessLetter(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"label\", null, [_createTextVNode(\" Guess a letter: \"), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.letter = $event),\n    type: \"text\",\n    maxlength: \"1\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.letter]])]), _hoisted_6], 32 /* HYDRATE_EVENTS */), $data.message ? (_openBlock(), _createElementBlock(\"p\", _hoisted_7, _toDisplayString($data.message), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $options.giveUp ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 3,\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.giveUp && $options.giveUp(...args))\n  }, \"Give up\")) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;AAAS;;;;;;;;;;;gCAchBC,oBAAoC;EAA5BC,IAAI,EAAC;AAAQ,GAAC,OAAK;;;;;uBAd/BC,oBAkBM,OAlBNC,UAkBM,GAjBJH,oBAAyC;IAAnCI,GAAG,cAAcC,WAAK;uCACnBA,UAAI,kBAAbH,oBAA6B,kCAAXG,UAAI,uCAEpBH,oBAGII;IAAAC;EAAA,eAHgBF,iBAAW,EAArBG,MAAM;yBAAhBN,oBAGI,YAFUG,oBAAc,CAACI,QAAQ,CAACD,MAAM,mBAA1CN,oBAAgE,qCAAhBM,MAAM,mCACtDN,oBAAqB,oBAAR,GAAC;oCAGlBF,oBAMO;IANIU,QAAM,wDAAUC,qDAAW;MACpCX,oBAGQ,iCAHD,mBAEL,uCAAoD;+DAApCK,YAAM;IAAEJ,IAAI,EAAC,MAAM;IAACW,SAAS,EAAC;iDAA9BP,YAAM,OAExBQ,UAAoC,6BAE7BR,aAAO,kBAAhBH,oBAAmC,kCAAdG,aAAO,uDACdM,eAAM,kBAApBT,oBAA0D;;IAA/BY,OAAK,yCAAEH,2CAAM;KAAE,SAAO","names":["class","_createElementVNode","type","_createElementBlock","_hoisted_1","src","$data","_Fragment","key","letter","includes","onSubmit","$options","maxlength","_hoisted_6","onClick"],"sourceRoot":"","sources":["/Users/miguel/hangman/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"hangman\">\n    <img :src=\"'hangman' + steps + '.png'\" />\n    <p v-if=\"word\">{{ word }}</p>\n    <template v-else>\n      <p v-for=\"letter in wordLetters\">\n        <span v-if=\"guessedLetters.includes(letter)\">{{ letter }}</span>\n        <span v-else>_</span>\n      </p>\n    </template>\n    <form v-on:submit.prevent=\"guessLetter\">\n      <label>\n        Guess a letter:\n        <input v-model=\"letter\" type=\"text\" maxlength=\"1\" />\n      </label>\n      <button type=\"submit\">Guess</button>\n    </form>\n    <p v-if=\"message\">{{ message }}</p>\n    <button v-if=\"giveUp\" v-on:click=\"giveUp\">Give up</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      steps: 0,\n      word: '',\n      wordLetters: [],\n      guessedLetters: [],\n      letter: '',\n      message: '',\n      giveUp: false,\n    };\n  },\n  mounted() {\n    // Fetch a word from the worldlist.json file\n    axios.get('worldlist.json').then(response => {\n      this.word = response.data.word;\n      this.wordLetters = this.word.split('');\n    });\n  },\n  methods: {\n    guessLetter() {\n      // Check if the letter has been guessed already\n      if (this.guessedLetters.includes(this.letter)) {\n        this.message = 'You have already guessed that letter';\n        return;\n      }\n\n      // Add the letter to the guessed letters\n      this.guessedLetters.push(this.letter);\n\n      // Check if the word contains the letter\n      if (this.word.includes(this.letter)) {\n        this.message = 'Correct!';\n\n        // Check if the player has won\n        if (!this.wordLetters.some(letter => !this.guessedLetters.includes(letter))) {\n          this.message = 'You win!';\n          this.giveUp = false;\n        }\n      } else {\n        this.message = 'Incorrect!';\n        this.steps += 1;\n\n        // Check if the player has lost\n        if (this.steps === 10) {\n          this.message = 'You lose!';\n          this.giveUp = false;\n        }\n      }\n\n      // Reset the letter input\n      this.letter = '';\n    },\n    giveUp() {\n      this.message = 'You give up!';\n      this.giveUp = false;\n      this.word = '';\n    },\n  },\n};\n</script>\n\n<style>\n.hangman {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\nimg {\n  height: 300px;\n}\n\np {\n  font-size: 2em;\n  margin: 10px 0;\n}\n\nspan {\n  font-size: 2em;\n}\n</style>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}