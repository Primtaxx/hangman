{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport WordData from \"../Aufgabe/wordlist.json\";\nexport default {\n  data() {\n    return {\n      word: WordData[Math.floor(Math.random() * WordData.length)],\n      letter: \"\",\n      letters: Array.from(Array(26)).map((e, i) => String.fromCharCode(i + 65)),\n      usedLetters: [],\n      guessesLeft: 10,\n      timer: null,\n      startTime: null,\n      endTime: null,\n      show: false,\n      won: false,\n      lost: false\n    };\n  },\n  computed: {\n    maskedWord() {\n      let masked = \"\";\n      for (let i = 0; i <= this.word.length; i++) {\n        if (this.word.includes(this.usedLetters[i])) {\n          masked += this.word[i];\n        } else {\n          masked += \"_\";\n        }\n      }\n      return masked;\n    }\n  },\n  watch: {\n    usedLetters() {}\n  },\n  methods: {\n    guessLetter(l) {\n      // if (this.letters) {\n      //   this.letters = \"\";\n      //   l = this.letters;\n      //   console.log(l)\n      // }\n\n      if (this.usedLetters.includes(l.toLowerCase()) || this.won || this.lost) {\n        return;\n      }\n      this.usedLetters.push(l.toLowerCase());\n      if (this.word.includes(l.toLowerCase())) {\n        let newMaskedWord = \"\";\n        for (let i = 0; i < this.word.length; i++) {\n          if (this.word[i] == l.toLowerCase()) {\n            newMaskedWord += l.toLowerCase();\n          } else {\n            newMaskedWord += \"_\";\n          }\n        }\n        this.maskedWord = newMaskedWord;\n        this.gefunden += l.toLowerCase();\n      } else {\n        this.guessesLeft--;\n        // console.log(this.maskedWord)\n      }\n\n      // this.letters = this.letters.filter((letter) => {letter != l});\n      this.$forceUpdate();\n      this.checkGameOver();\n    },\n    checkGameOver() {\n      if (!this.maskedWord.includes(\"_\")) {\n        this.won = true;\n        clearInterval(this.timer);\n        this.endTime = Date.now();\n        this.saveScore();\n      }\n      if (this.guessesLeft === 0) {\n        this.lost = true;\n        clearInterval(this.timer);\n      }\n    },\n    saveScore() {\n      let scores = JSON.parse(localStorage.getItem(\"scores\")) || [];\n      let time = this.endTime - this.startTime;\n      scores.push({\n        time,\n        word: this.word\n      });\n      localStorage.setItem(\"scores\", JSON.stringify(scores));\n    },\n    cheat() {\n      this.show = true;\n    },\n    startTimer() {\n      this.startTime = Date.now();\n      this.timer = setInterval(() => {}, 1000);\n    }\n  },\n  mounted() {\n    console.log(this.word);\n    window.addEventListener(\"keydown\", e => {\n      if (e.key.length === 1) {\n        this.guessLetter(e.key.toUpperCase());\n      }\n    });\n    this.startTimer();\n  }\n};","map":{"version":3,"mappings":"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","names":["WordData","data","word","Math","floor","random","length","letter","letters","Array","from","map","e","i","String","fromCharCode","usedLetters","guessesLeft","timer","startTime","endTime","show","won","lost","computed","maskedWord","masked","includes","watch","methods","guessLetter","l","toLowerCase","push","newMaskedWord","gefunden","$forceUpdate","checkGameOver","clearInterval","Date","now","saveScore","scores","JSON","parse","localStorage","getItem","time","setItem","stringify","cheat","startTimer","setInterval","mounted","console","log","window","addEventListener","key","toUpperCase"],"sourceRoot":"","sources":["/Users/miguel/hangman/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <img :src=\"require('./img/' +(10 - guessesLeft)+'.jpg')\" >\n    <p>Word: {{maskedWord}}</p>\n    <p>Guesses left: {{guessesLeft}}</p>\n    <p v-if=\"won\">You won!</p>\n    <p v-if=\"lost\">You lost! The word was: {{word}}</p>\n    <!-- <input v-model=\"letter\" type=\"text\" maxlength=\"1\" />\n    <button @click=\"guessLetter\">Guess</button> -->\n    <br />\n    <button v-for=\"l in letters\" :key=\"l\" @click=\"guessLetter(l)\">{{l}}</button>\n    <br />\n    <button v-if=\"!won && !lost\" @click=\"cheat\">Cheat</button>\n    \n  </div>\n</template>\n\n<script>\nimport WordData from \"../Aufgabe/wordlist.json\";\n\n\nexport default {\n  data() {\n    return {\n      word: WordData[Math.floor(Math.random() * WordData.length)],\n      letter: \"\",\n      letters: Array.from(Array(26)).map((e, i) => String.fromCharCode(i + 65)),\n      usedLetters: [],\n      guessesLeft: 10,\n      timer: null,\n      startTime: null,\n      endTime: null,\n      show: false,\n      won: false,\n      lost: false,\n    };\n  },\n\n  computed: {\n    maskedWord() {\n      \n      let masked = \"\";\n      for (let i = 0; i <= this.word.length; i++) {\n        if (this.word.includes(this.usedLetters[i])) {\n          \n          masked += this.word[i];\n        } else {\n          \n          masked += \"_\";\n        }\n      }\n      \n      return masked;\n    },\n    \n  },\n  watch: {\n    usedLetters() {\n    },\n  },\n\n\n  methods: {\n    guessLetter(l) {\n    // if (this.letters) {\n    //   this.letters = \"\";\n    //   l = this.letters;\n    //   console.log(l)\n    // }\n    \n\n    if (this.usedLetters.includes(l.toLowerCase()) || this.won || this.lost){\n      \n      return;\n\n    }\n    this.usedLetters.push(l.toLowerCase());\n\n    if (this.word.includes(l.toLowerCase())) {\n      \n      let newMaskedWord = \"\";\n      for (let i = 0; i < this.word.length; i++) {\n        if (this.word[i] == l.toLowerCase()) {\n          newMaskedWord += l.toLowerCase();\n        } else {\n          newMaskedWord += \"_\";\n        }\n      }\n      this.maskedWord = newMaskedWord;\n      this.gefunden += l.toLowerCase();\n      \n    }else {\n      \n      this.guessesLeft--;\n      // console.log(this.maskedWord)\n    }\n\n    // this.letters = this.letters.filter((letter) => {letter != l});\n    this.$forceUpdate();\n    this.checkGameOver();\n  },\n\n\n\n\n\ncheckGameOver() {\n  if (!this.maskedWord.includes(\"_\")) {\n    this.won = true;\n    clearInterval(this.timer);\n    this.endTime = Date.now();\n    this.saveScore();\n  }\n  if (this.guessesLeft === 0) {\n    this.lost = true;\n    clearInterval(this.timer);\n  }\n},\n    saveScore() {\n      let scores = JSON.parse(localStorage.getItem(\"scores\")) || [];\n      let time = this.endTime - this.startTime;\n      scores.push({ time, word: this.word });\n      localStorage.setItem(\"scores\", JSON.stringify(scores));\n    },\n    cheat() {\n      this.show = true;\n    },\n    startTimer() {\n      this.startTime = Date.now();\n      this.timer = setInterval(() => {}, 1000);\n    },\n  },\n  mounted() {\n    console.log(this.word)\n    \n    window.addEventListener(\"keydown\", (e) => {\n      if (e.key.length === 1) {\n        this.guessLetter(e.key.toUpperCase());\n      }\n    });\n    this.startTimer();\n  },\n};\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}