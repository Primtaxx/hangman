{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport WordData from \"../Aufgabe/wordlist.json\";\nexport default {\n  data() {\n    return {\n      word: WordData,\n      guesses: [],\n      maxGuesses: 6,\n      fehler: 0,\n      guess: ''\n    };\n  },\n  created() {\n    this.startGame();\n  },\n  methods: {\n    startGame() {\n      // Load word list from json file\n      fetch(WordData).then(response => response.json()).then(words => {\n        // Select a random word from the list\n        this.word = words[Math.floor(Math.random() * words.length)];\n      });\n\n      // Reset the image and guesses arrays\n      this.image = 0;\n      this.guesses = [];\n    },\n    guessLetter() {\n      // Add the guessed letter to the guesses array\n      this.guesses.push(this.guess);\n\n      // Check if the word contains the guessed letter\n      if (!this.word.includes(this.guess)) {\n        // Update the hangman image\n        this.image = this.maxGuesses - this.guesses.length;\n      }\n\n      // Check if the game is over\n      if (this.fehler === 10) {\n        alert('You lost!');\n        this.startGame();\n      } else if (!this.displayWord.includes('_')) {\n        alert('You won!');\n        this.startGame();\n      }\n\n      // Reset the guess input\n      this.guess = '';\n    }\n  },\n  computed: {\n    displayWord() {\n      // Create a new array with the letters of the word\n      let wordArray = this.word.split('');\n\n      // Replace each letter in the word with an underscore,\n      // unless the letter has been guessed correctly\n      return wordArray.map(letter => {\n        if (this.guesses.includes(letter)) {\n          return letter;\n        } else {\n          return '_';\n        }\n      }).join(' ');\n    }\n  }\n};","map":{"version":3,"mappings":";AAaA,OAAOA,QAAO,MAAO,0BAA0B;AAC/C,eAAe;EACbC,IAAI,GAAG;IACL,OAAO;MACLC,IAAI,EAAEF,QAAQ;MACdG,OAAO,EAAE,EAAE;MACXC,UAAU,EAAE,CAAC;MACbC,MAAM,EAAE,CAAC;MACTC,KAAK,EAAE;IACT;EACF,CAAC;EACDC,OAAO,GAAG;IACR,IAAI,CAACC,SAAS,EAAC;EACjB,CAAC;EACDC,OAAO,EAAE;IACPD,SAAS,GAAG;MACV;MACAE,KAAK,CAACV,QAAQ,EACXW,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,EAAE,EAChCF,IAAI,CAACG,KAAI,IAAK;QACb;QACA,IAAI,CAACZ,IAAG,GAAIY,KAAK,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAC,GAAIH,KAAK,CAACI,MAAM,CAAC;MAC5D,CAAC;;MAEH;MACA,IAAI,CAACC,KAAI,GAAI;MACb,IAAI,CAAChB,OAAM,GAAI,EAAC;IAClB,CAAC;IACDiB,WAAW,GAAG;MACZ;MACA,IAAI,CAACjB,OAAO,CAACkB,IAAI,CAAC,IAAI,CAACf,KAAK;;MAE5B;MACA,IAAI,CAAC,IAAI,CAACJ,IAAI,CAACoB,QAAQ,CAAC,IAAI,CAAChB,KAAK,CAAC,EAAE;QACnC;QACA,IAAI,CAACa,KAAI,GAAI,IAAI,CAACf,UAAS,GAAI,IAAI,CAACD,OAAO,CAACe,MAAK;MACnD;;MAEA;MACA,IAAI,IAAI,CAACb,MAAK,KAAM,EAAE,EAAE;QACtBkB,KAAK,CAAC,WAAW;QACjB,IAAI,CAACf,SAAS,EAAC;MACjB,OAAO,IAAI,CAAC,IAAI,CAACgB,WAAW,CAACF,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC1CC,KAAK,CAAC,UAAU;QAChB,IAAI,CAACf,SAAS,EAAC;MACjB;;MAEA;MACA,IAAI,CAACF,KAAI,GAAI,EAAC;IAChB;EACF,CAAC;EACDmB,QAAQ,EAAE;IACRD,WAAW,GAAG;MACZ;MACA,IAAIE,SAAQ,GAAI,IAAI,CAACxB,IAAI,CAACyB,KAAK,CAAC,EAAE;;MAElC;MACA;MACA,OAAOD,SAAS,CAACE,GAAG,CAACC,MAAK,IAAK;QAC7B,IAAI,IAAI,CAAC1B,OAAO,CAACmB,QAAQ,CAACO,MAAM,CAAC,EAAE;UACjC,OAAOA,MAAK;QACd,OAAO;UACL,OAAO,GAAE;QACX;MACF,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG;IACb;EACF;AACF","names":["WordData","data","word","guesses","maxGuesses","fehler","guess","created","startGame","methods","fetch","then","response","json","words","Math","floor","random","length","image","guessLetter","push","includes","alert","displayWord","computed","wordArray","split","map","letter","join"],"sourceRoot":"","sources":["/Users/miguel/hangman/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <img :src=\"require('./img/' +fehler+'.jpg')\" :alt=\"fehler\">\n    <p>{{ displayWord }}</p>\n    <form @submit.prevent=\"guessLetter\">\n      <label for=\"guess\">Guess a letter:</label>\n      <input type=\"text\" v-model=\"guess\" maxlength=\"1\" />\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport WordData from \"../Aufgabe/wordlist.json\";\nexport default {\n  data() {\n    return {\n      word: WordData,\n      guesses: [],\n      maxGuesses: 6,\n      fehler: 0,\n      guess: ''\n    }\n  },\n  created() {\n    this.startGame()\n  },\n  methods: {\n    startGame() {\n      // Load word list from json file\n      fetch(WordData)\n        .then(response => response.json())\n        .then(words => {\n          // Select a random word from the list\n          this.word = words[Math.floor(Math.random() * words.length)]\n        })\n\n      // Reset the image and guesses arrays\n      this.image = 0\n      this.guesses = []\n    },\n    guessLetter() {\n      // Add the guessed letter to the guesses array\n      this.guesses.push(this.guess)\n\n      // Check if the word contains the guessed letter\n      if (!this.word.includes(this.guess)) {\n        // Update the hangman image\n        this.image = this.maxGuesses - this.guesses.length\n      }\n\n      // Check if the game is over\n      if (this.fehler === 10) {\n        alert('You lost!')\n        this.startGame()\n      } else if (!this.displayWord.includes('_')) {\n        alert('You won!')\n        this.startGame()\n      }\n\n      // Reset the guess input\n      this.guess = ''\n    }\n  },\n  computed: {\n    displayWord() {\n      // Create a new array with the letters of the word\n      let wordArray = this.word.split('')\n\n      // Replace each letter in the word with an underscore,\n      // unless the letter has been guessed correctly\n      return wordArray.map(letter => {\n        if (this.guesses.includes(letter)) {\n          return letter\n        } else {\n          return '_'\n        }\n      }).join(' ')\n    }\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}