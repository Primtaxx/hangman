{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = [\"src\"];\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_7 = {\n  key: 2\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"img\", {\n    src: require('./img/' + (10 - $data.guessesLeft) + '.jpg')\n  }, null, 8 /* PROPS */, _hoisted_1), _createElementVNode(\"p\", null, \"Word: \" + _toDisplayString($options.maskedWord), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Guesses left: \" + _toDisplayString($data.guessesLeft), 1 /* TEXT */), $data.won ? (_openBlock(), _createElementBlock(\"p\", _hoisted_2, \"You won!\")) : _createCommentVNode(\"v-if\", true), $data.lost ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, \"You lost! The word was: \" + _toDisplayString($data.word), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" <input v-model=\\\"letter\\\" type=\\\"text\\\" maxlength=\\\"1\\\" />\\n    <button @click=\\\"guessLetter\\\">Guess</button> \"), _hoisted_4, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.letters, l => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      key: l,\n      onClick: $event => $options.guessLetter(l)\n    }, _toDisplayString(l), 9 /* TEXT, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */)), _hoisted_6, $data.show ? (_openBlock(), _createElementBlock(\"span\", _hoisted_7, _toDisplayString($data.word), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"p\", null, \"Highscore: \" + _toDisplayString($data.highscore), 1 /* TEXT */)]);\n}","map":{"version":3,"mappings":";;;;;;;;gCASIA,oBAAM;;gCAENA,oBAAM;;;;;uBAVRC,oBAcM,cAbJD,oBAA0D;IAApDE,GAAG,EAAEC,OAAO,kBAAiBC,iBAAW;uCAC9CJ,oBAA2B,WAAxB,QAAM,oBAAEK,mBAAU,kBACrBL,oBAAoC,WAAjC,gBAAc,oBAAEI,iBAAW,kBACrBA,SAAG,kBAAZH,oBAA0B,iBAAZ,UAAQ,wCACbG,UAAI,kBAAbH,oBAAmD,iBAApC,0BAAwB,oBAAEG,UAAI,uDAC7CE,sIAC+C,EAC/CC,UAAM,qBACNN,oBAA4EO,6BAAxDJ,aAAO,EAAZK,CAAC;yBAAhBR,oBAA4E;MAA9CS,GAAG,EAAED,CAAC;MAAGE,OAAK,YAAEN,oBAAW,CAACI,CAAC;wBAAKA,CAAC;kCACjEG,UAAM,EACMR,UAAI,kBAAhBH,oBAAmC,qCAAdG,UAAI,uDACzBJ,oBAAiC,WAA9B,aAAW,oBAAGI,eAAS","names":["_createElementVNode","_createElementBlock","src","require","$data","$options","_createCommentVNode","_hoisted_4","_Fragment","l","key","onClick","_hoisted_6"],"sourceRoot":"","sources":["/Users/miguel/hangman/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <img :src=\"require('./img/' +(10 - guessesLeft)+'.jpg')\" >\n    <p>Word: {{maskedWord}}</p>\n    <p>Guesses left: {{guessesLeft}}</p>\n    <p v-if=\"won\">You won!</p>\n    <p v-if=\"lost\">You lost! The word was: {{word}}</p>\n    <!-- <input v-model=\"letter\" type=\"text\" maxlength=\"1\" />\n    <button @click=\"guessLetter\">Guess</button> -->\n    <br />\n    <button v-for=\"l in letters\" :key=\"l\" @click=\"guessLetter(l)\">{{l}}</button>\n    <br />\n    <span v-if=\"show\">{{ word }}</span>\n    <p>Highscore: {{ highscore }}</p>\n    \n  </div>\n</template>\n\n<script>\nimport WordData from \"../Aufgabe/wordlist.json\";\n\n\nexport default {\n  data() {\n    return {\n      word: WordData[Math.floor(Math.random() * WordData.length)],\n      letter: \"\",\n      letters: Array.from(Array(26)).map((e, i) => String.fromCharCode(i + 65)),\n      usedLetters: [],\n      guessesLeft: 10,\n      timer: null,\n      highscore:0,\n      startTime: null,\n      endTime: null,\n      show: false,\n      won: false,\n      storage: [],\n      lost: false,\n    };\n  },\n\n  computed: {\n    maskedWord() {\n      \n      let masked = \"\";\n      for (let i = 0; i < this.word.length; i++) {\n        if (this.usedLetters.includes(this.word[i])) {\n          \n          masked += this.word[i];\n        } else {\n          \n          masked += \"_\";\n        }\n      }\n      \n      return masked;\n    },\n    \n  },\n  watch: {\n    usedLetters() {\n    },\n  },\n\n\n  methods: {\n    guessLetter(l) {\n \n    \n\n    if (this.usedLetters.includes(l.toLowerCase()) || this.won || this.lost){\n      \n      return;\n\n    }\n    this.usedLetters.push(l.toLowerCase());\n\n    if (this.word.includes(l.toLowerCase())) {\n      \n      let newMaskedWord = \"\";\n      for (let i = 0; i < this.word.length; i++) {\n        if (this.word[i] == l.toLowerCase()) {\n          newMaskedWord += l.toLowerCase();\n        } else {\n          newMaskedWord += \"_\";\n        }\n      }\n     \n      this.maskedWord = newMaskedWord;\n      this.gefunden += l.toLowerCase();\n      \n    }else {\n      \n      this.guessesLeft--;\n      // console.log(this.maskedWord)\n    }\n    this.letters = this.letters.filter((letter) => letter !== l);\n    this.$forceUpdate();\n    this.checkGameOver();\n  },\n\n\n\n\n\n\ncheckGameOver() {\n  if (!this.maskedWord.includes(\"_\")) {\n    this.won = true;\n    clearInterval(this.timer);\n    this.endTime = Date.now();\n    this.saveScore();\n  }\n  if (this.guessesLeft === 0) {\n    this.lost = true;\n    clearInterval(this.timer);\n  }\n},\n\nsaveScore() {\n    this.highscore = (this.endTime - this.startTime) / 1000 + this.guessesLeft * 100;\n    this.storage.push([new Date(), this.highscore]);\n    localStorage.setItem(\"highscores\", JSON.stringify(this.storage));\n  },\n\n\n  },\n  mounted() {\n    let highscores = localStorage.getItem(\"highscores\");\n    if (highscores) {\n      this.storage = JSON.parse(highscores);\n    }\n    console.log(this.word)\n    this.startTime = Date.now();\n    this.timer = setInterval(() => {\n    }, 1000);\n    window.addEventListener(\"keydown\", (e) => {\n    if (e.key === \"c\") { \n      this.show = !this.show;\n    }\n    });\n  \n  },\n};\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}