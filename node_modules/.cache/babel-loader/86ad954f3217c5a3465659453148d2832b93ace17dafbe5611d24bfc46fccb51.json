{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport WordData from \"../Aufgabe/wordlist.json\";\nexport default {\n  data() {\n    return {\n      word: WordData[Math.floor(Math.random() * WordData.length)],\n      letter: \"\",\n      letters: Array.from(Array(26)).map((e, i) => String.fromCharCode(i + 65)),\n      usedLetters: [],\n      guessesLeft: 6,\n      timer: null,\n      startTime: null,\n      endTime: null,\n      show: false,\n      won: false,\n      lost: false\n    };\n  },\n  computed: {\n    maskedWord() {\n      let masked = \"\";\n      for (let i = 0; i < this.word.length; i++) {\n        if (this.usedLetters.includes(this.word[i])) {\n          masked += this.word[i];\n        } else {\n          masked += \"_\";\n        }\n      }\n      return masked;\n    }\n  },\n  methods: {\n    guessLetter(l) {\n      if (!l) l = this.letter;\n      if (this.usedLetters.includes(l)) return;\n      this.usedLetters.push(l);\n      if (!this.word.includes(l)) {\n        this.guessesLeft--;\n      }\n      this.checkGameOver();\n    },\n    checkGameOver() {\n      if (!this.maskedWord.includes(\"_\")) {\n        this.won = true;\n        clearInterval(this.timer);\n        this.endTime = Date.now();\n        this.saveScore();\n      }\n      if (this.guessesLeft === 0) {\n        this.lost = true;\n        clearInterval(this.timer);\n      }\n    },\n    saveScore() {\n      let scores = JSON.parse(localStorage.getItem(\"scores\")) || [];\n      let time = this.endTime - this.startTime;\n      scores.push({\n        time,\n        word: this.word\n      });\n      localStorage.setItem(\"scores\", JSON.stringify(scores));\n    },\n    cheat() {\n      this.show = true;\n    },\n    startTimer() {\n      this.startTime = Date.now();\n      this.timer = setInterval(() => {}, 1000);\n    }\n  },\n  mounted() {\n    window.addEventListener(\"keydown\", e => {\n      if (e.key.length === 1) {\n        this.guessLetter(e.key.toUpperCase());\n      }\n    });\n    this.startTimer();\n  }\n};","map":{"version":3,"mappings":"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","names":["WordData","data","word","Math","floor","random","length","letter","letters","Array","from","map","e","i","String","fromCharCode","usedLetters","guessesLeft","timer","startTime","endTime","show","won","lost","computed","maskedWord","masked","includes","methods","guessLetter","l","push","checkGameOver","clearInterval","Date","now","saveScore","scores","JSON","parse","localStorage","getItem","time","setItem","stringify","cheat","startTimer","setInterval","mounted","window","addEventListener","key","toUpperCase"],"sourceRoot":"","sources":["/Users/miguel/hangman/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <p>Word: {{maskedWord}}</p>\n    <p>Guesses left: {{guessesLeft}}</p>\n    <p v-if=\"won\">You won!</p>\n    <p v-if=\"lost\">You lost! The word was: {{word}}</p>\n    <input v-model=\"letter\" type=\"text\" maxlength=\"1\" />\n    <button @click=\"guessLetter\">Guess</button>\n    <br />\n    <button v-for=\"l in letters\" :key=\"l\" @click=\"guessLetter(l)\">{{l}}</button>\n    <br />\n    <button v-if=\"!won && !lost\" @click=\"cheat\">Cheat</button>\n  </div>\n</template>\n\n<script>\nimport WordData from \"../Aufgabe/wordlist.json\";\n\nexport default {\n  data() {\n    return {\n      word: WordData[Math.floor(Math.random() * WordData.length)],\n      letter: \"\",\n      letters: Array.from(Array(26)).map((e, i) => String.fromCharCode(i + 65)),\n      usedLetters: [],\n      guessesLeft: 6,\n      timer: null,\n      startTime: null,\n      endTime: null,\n      show: false,\n      won: false,\n      lost: false,\n    };\n  },\n  computed: {\n    maskedWord() {\n      let masked = \"\";\n      for (let i = 0; i < this.word.length; i++) {\n        if (this.usedLetters.includes(this.word[i])) {\n          masked += this.word[i];\n        } else {\n          masked += \"_\";\n        }\n      }\n      return masked;\n    },\n  },\n  methods: {\n    guessLetter(l) {\n      if (!l) l = this.letter;\n      if (this.usedLetters.includes(l)) return;\n      this.usedLetters.push(l);\n      if (!this.word.includes(l)) {\n        this.guessesLeft--;\n      }\n      this.checkGameOver();\n    },\n    checkGameOver() {\n      if (!this.maskedWord.includes(\"_\")) {\n        this.won = true;\n        clearInterval(this.timer);\n        this.endTime = Date.now();\n        this.saveScore();\n      }\n      if (this.guessesLeft === 0) {\n        this.lost = true;\n        clearInterval(this.timer);\n      }\n    },\n    saveScore() {\n      let scores = JSON.parse(localStorage.getItem(\"scores\")) || [];\n      let time = this.endTime - this.startTime;\n      scores.push({ time, word: this.word });\n      localStorage.setItem(\"scores\", JSON.stringify(scores));\n    },\n    cheat() {\n      this.show = true;\n    },\n    startTimer() {\n      this.startTime = Date.now();\n      this.timer = setInterval(\n        () => {}, 1000);\n},\n},\nmounted() {\nwindow.addEventListener(\"keydown\", (e) => {\nif (e.key.length === 1) {\nthis.guessLetter(e.key.toUpperCase());\n}\n});\nthis.startTimer();\n},\n};\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}