{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport WordData from \"../Aufgabe/wordlist.json\";\nexport default {\n  data() {\n    return {\n      word: WordData[Math.floor(Math.random() * WordData.length)],\n      letter: \"\",\n      letters: Array.from(Array(26)).map((e, i) => String.fromCharCode(i + 65)),\n      usedLetters: [],\n      guessesLeft: 10,\n      timer: null,\n      startTime: null,\n      endTime: null,\n      show: false,\n      won: false,\n      lost: false,\n      fehler: 0\n    };\n  },\n  computed: {\n    maskedWord() {\n      let masked = \"\";\n      for (let i = 0; i < this.word.length; i++) {\n        if (this.usedLetters.includes(this.word[i])) {\n          masked += this.word[i];\n        } else {\n          masked += \"_\";\n        }\n      }\n      return masked;\n    },\n    displayLetters() {\n      return this.letters.filter(l => !this.usedLetters.includes(l));\n    }\n  },\n  watch: {\n    usedLetters() {\n      this.checkGameOver();\n    }\n  },\n  methods: {\n    guessLetter(l) {\n      if (!this.won && !this.lost) {\n        if (this.letter) {\n          l = this.letter;\n          this.letter = \"\";\n        }\n        if (this.usedLetters.includes(l)) return;\n        this.usedLetters.push(l);\n        if (!this.word.includes(l)) {\n          this.guessesLeft--;\n        }\n        this.letters = this.letters.filter(letter => letter !== l);\n        this.$forceUpdate();\n        this.checkGameOver();\n      }\n    },\n    checkGameOver() {\n      if (!this.maskedWord.includes(\"_\")) {\n        this.won = true;\n        clearInterval(this.timer);\n        this.endTime = Date.now();\n        this.saveScore();\n      }\n      if (this.guessesLeft === 0) {\n        this.lost = true;\n        clearInterval(this.timer);\n      }\n    },\n    saveScore() {\n      let scores = JSON.parse(localStorage.getItem(\"scores\")) || [];\n      let time = this.endTime - this.startTime;\n      scores.push({\n        time,\n        word: this.word\n      });\n      localStorage.setItem(\"scores\", JSON.stringify(scores));\n    },\n    cheat() {\n      this.show = true;\n    },\n    startTimer() {\n      this.startTime = Date.now();\n      this.timer = setInterval(() => {}, 1000);\n    }\n  },\n  mounted() {\n    window.addEventListener(\"keydown\", e => {\n      if (e.key.length === 1) {\n        this.guessLetter(e.key.toUpperCase());\n      }\n    });\n    this.startTimer();\n  }\n};","map":{"version":3,"mappings":"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","names":["WordData","data","word","Math","floor","random","length","letter","letters","Array","from","map","e","i","String","fromCharCode","usedLetters","guessesLeft","timer","startTime","endTime","show","won","lost","fehler","computed","maskedWord","masked","includes","displayLetters","filter","l","watch","checkGameOver","methods","guessLetter","push","$forceUpdate","clearInterval","Date","now","saveScore","scores","JSON","parse","localStorage","getItem","time","setItem","stringify","cheat","startTimer","setInterval","mounted","window","addEventListener","key","toUpperCase"],"sourceRoot":"","sources":["/Users/miguel/hangman/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <img :src=\"require('./img/' +(10 - guessesLeft)+'.jpg')\" :alt=\"fehler\">\n    <p>Word: {{maskedWord}}</p>\n    <p>Guesses left: {{guessesLeft}}</p>\n    <p v-if=\"won\">You won!</p>\n    <p v-if=\"lost\">You lost! The word was: {{word}}</p>\n    <input v-model=\"letter\" type=\"text\" maxlength=\"1\" />\n    <button @click=\"guessLetter\">Guess</button>\n    <br />\n    <button v-for=\"l in displayLetters\" :key=\"l\" @click=\"guessLetter(l)\">{{l}}</button>\n    <br />\n    <button v-if=\"!won && !lost\" @click=\"cheat\">Cheat</button>\n  </div>\n</template>\n\n<script>\nimport WordData from \"../Aufgabe/wordlist.json\";\n\nexport default {\n  data() {\n    return {\n      word: WordData[Math.floor(Math.random() * WordData.length)],\n      letter: \"\",\n      letters: Array.from(Array(26)).map((e, i) => String.fromCharCode(i + 65)),\n      usedLetters: [],\n      guessesLeft: 10,\n      timer: null,\n      startTime: null,\n      endTime: null,\n      show: false,\n      won: false,\n      lost: false,\n      fehler: 0, \n    };\n  },\n\n  computed: {\n  maskedWord() {\n    let masked = \"\";\n    for (let i = 0; i < this.word.length; i++) {\n      if (this.usedLetters.includes(this.word[i])) {\n        masked += this.word[i];\n      } else {\n        masked += \"_\";\n      }\n    }\n    return masked;\n  },\n  displayLetters() {\n    return this.letters.filter((l) => !this.usedLetters.includes(l));\n  },\n},\nwatch: {\n    usedLetters() {\n      this.checkGameOver();\n    },\n  },\n\n\n  methods: {\n  guessLetter(l) {\n  if (!this.won && !this.lost) {\n    if (this.letter) {\n      l = this.letter;\n      this.letter = \"\";\n    }\n    if (this.usedLetters.includes(l)) return;\n    this.usedLetters.push(l);\n    if (!this.word.includes(l)) {\n      this.guessesLeft--;\n    }\n    this.letters = this.letters.filter((letter) => letter !== l);\n    this.$forceUpdate();\n    this.checkGameOver();\n  }\n},\n\n\ncheckGameOver() {\n  if (!this.maskedWord.includes(\"_\")) {\n    this.won = true;\n    clearInterval(this.timer);\n    this.endTime = Date.now();\n    this.saveScore();\n  }\n  if (this.guessesLeft === 0) {\n    this.lost = true;\n    clearInterval(this.timer);\n  }\n},\n    saveScore() {\n      let scores = JSON.parse(localStorage.getItem(\"scores\")) || [];\n      let time = this.endTime - this.startTime;\n      scores.push({ time, word: this.word });\n      localStorage.setItem(\"scores\", JSON.stringify(scores));\n    },\n    cheat() {\n      this.show = true;\n    },\n    startTimer() {\n      this.startTime = Date.now();\n      this.timer = setInterval(() => {}, 1000);\n    },\n  },\n  mounted() {\n    window.addEventListener(\"keydown\", (e) => {\n      if (e.key.length === 1) {\n        this.guessLetter(e.key.toUpperCase());\n      }\n    });\n    this.startTimer();\n  },\n};\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}