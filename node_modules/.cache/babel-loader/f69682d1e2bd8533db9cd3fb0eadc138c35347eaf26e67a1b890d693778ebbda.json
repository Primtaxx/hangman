{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = [\"src\", \"alt\"];\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"guess\"\n}, \"Guess a letter:\", -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Submit\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"img\", {\n    src: require('./img/' + $data.fehler + '.jpg'),\n    alt: $data.fehler\n  }, null, 8 /* PROPS */, _hoisted_1), _createElementVNode(\"p\", null, _toDisplayString($options.displayWord), 1 /* TEXT */), _createElementVNode(\"form\", {\n    onSubmit: _cache[1] || (_cache[1] = _withModifiers((...args) => $options.guessLetter && $options.guessLetter(...args), [\"prevent\"]))\n  }, [_hoisted_2, _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.guess = $event),\n    maxlength: \"1\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.guess]]), _hoisted_3], 32 /* HYDRATE_EVENTS */)]);\n}","map":{"version":3,"mappings":";;gCAKMA,oBAA0C;EAAnCC,GAAG,EAAC;AAAO,GAAC,iBAAe;gCAElCD,oBAAqC;EAA7BE,IAAI,EAAC;AAAQ,GAAC,QAAM;;;uBANhCC,oBAQM,cAPJH,oBAA2D;IAArDI,GAAG,EAAEC,OAAO,YAAWC,YAAM;IAAWC,GAAG,EAAED;uCACnDN,oBAAwB,4BAAlBQ,oBAAW,kBACjBR,oBAIO;IAJAS,QAAM,wDAAUD,qDAAW;MAChCE,UAA0C,kBAC1CV,oBAAmD;IAA5CE,IAAI,EAAC,MAAM;+DAAUI,WAAK;IAAEK,SAAS,EAAC;iDAAjBL,WAAK,KACjCM,UAAqC","names":["_createElementVNode","for","type","_createElementBlock","src","require","$data","alt","$options","onSubmit","_hoisted_2","maxlength","_hoisted_3"],"sourceRoot":"","sources":["/Users/miguel/hangman/src/App.vue"],"sourcesContent":["<template>\n  <div>\n    <img :src=\"require('./img/' +fehler+'.jpg')\" :alt=\"fehler\">\n    <p>{{ displayWord }}</p>\n    <form @submit.prevent=\"guessLetter\">\n      <label for=\"guess\">Guess a letter:</label>\n      <input type=\"text\" v-model=\"guess\" maxlength=\"1\" />\n      <button type=\"submit\">Submit</button>\n    </form>\n  </div>\n</template>\n\n<script>\nimport WordData from \"../Aufgabe/wordlist.json\";\nexport default {\n  data() {\n    return {\n      word: WordData,\n      guesses: [],\n      maxGuesses: 6,\n      fehler: 0,\n      guess: ''\n    }\n  },\n  created() {\n    this.startGame()\n  },\n  methods: {\n    startGame() {\n      // Load word list from json file\n      fetch(WordData)\n        .then(response => response.json())\n        .then(words => {\n          // Select a random word from the list\n          this.word = words[Math.floor(Math.random() * words.length)]\n        })\n\n      // Reset the image and guesses arrays\n      this.image = 0\n      this.guesses = []\n    },\n    guessLetter() {\n      // Add the guessed letter to the guesses array\n      this.guesses.push(this.guess)\n\n      // Check if the word contains the guessed letter\n      if (!this.word.includes(this.guess)) {\n        // Update the hangman image\n        this.image = this.maxGuesses - this.guesses.length\n      }\n\n      // Check if the game is over\n      if (this.fehler === 10) {\n        alert('You lost!')\n        this.startGame()\n      } else if (!this.displayWord.includes('_')) {\n        alert('You won!')\n        this.startGame()\n      }\n\n      // Reset the guess input\n      this.guess = ''\n    }\n  },\n  computed: {\n    displayWord() {\n      // Create a new array with the letters of the word\n      let wordArray = this.word.split('')\n\n      // Replace each letter in the word with an underscore,\n      // unless the letter has been guessed correctly\n      return wordArray.map(letter => {\n        if (this.guesses.includes(letter)) {\n          return letter\n        } else {\n          return '_'\n        }\n      }).join(' ')\n    }\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}